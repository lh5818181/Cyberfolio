import React from 'react';
import { type Variants } from 'framer-motion'
import { Code, Palette, Zap, Globe } from 'lucide-react';
import {
  AboutContainer,
  AboutContent,
  TextContent,
  SectionTitle,
  Description,
  StatsContainer,
  StatItem,
  StatNumber,
  StatLabel,
  SkillsContent,
  SkillsTitle,
  TechGrid,
  TechItem,
  TechIcon,
  TechName,
  SkillCards,
  SkillCard,
  SkillHeader,
  SkillIcon,
  SkillTitle,
  SkillDescription,
} from './styles';

/**
 * Interface para estat√≠sticas
 */
interface Stat {
  number: string;
  label: string;
}

/**
 * Interface para tecnologias
 */
interface Technology {
  name: string;
  icon: string;
}

/**
 * Interface para habilidades
 */
interface Skill {
  icon: React.ComponentType<{ size?: number }>;
  title: string;
  description: string;
}

/**
 * Props do componente About
 */
interface AboutProps {
  className?: string;
}

/**
 * Componente About
 *
 * Se√ß√£o sobre o desenvolvedor com:
 * - Descri√ß√£o pessoal e profissional
 * - Estat√≠sticas de experi√™ncia
 * - Grid de tecnologias conhecidas
 * - Cards de habilidades principais
 * - Anima√ß√µes de entrada escalonadas
 */
const About: React.FC<AboutProps> = ({ className }) => {
  /**
   * Estat√≠sticas do desenvolvedor
   */
  const stats: Stat[] = [
    { number: '1000+', label: 'Horas de C√≥digo' },
    { number: '10+', label: 'Projetos de Estudo' },
    { number: '2', label: 'Stacks de Tecnologia' },
    { number: '100%', label: 'Dedica√ß√£o' },
  ];

  /**
   * Tecnologias conhecidas
   */
  const technologies: Technology[] = [
    { name: 'React', icon: '‚öõÔ∏è' },
    { name: 'TypeScript', icon: 'üî∑' },
    { name: 'JavaScript', icon: 'üíõ' },
    { name: 'Next.js', icon: '‚ùå' },
    { name: 'HTML5', icon: 'üß°' },
    { name: 'CSS3', icon: 'üíô' },
    { name: 'Git', icon: 'üìö' },
    { name: 'Github', icon: '‚ùå' },
    { name: 'SASS', icon: '‚ùå' },
    { name: 'Tailwind CSS', icon: '‚ùå' },
    { name: 'Styled-components', icon: '‚ùå' },
    { name: 'React Testing Library', icon: '‚ùå' },
    { name: 'Testes E2E com Cypress', icon: '‚ùå' },
    { name: 'Vercel', icon: '‚ùå' },
    { name: 'Figma', icon: '‚ùå' },
  ];

  /**
   * Habilidades principais
   */
  const skills: Skill[] = [
    {
      icon: Code,
      title: 'Desenvolvimento Front-End',
      description:
        'Cria√ß√£o de aplica√ß√µes web interativas e de alta performance, desde a estrutura√ß√£o com HTML/CSS at√© a componentiza√ß√£o com React e Next.js.',
    },
    {
      icon: Palette,
      title: 'UI/UX Design',
      description:
        'Foco em interfaces modernas e intuitivas, aplicando princ√≠pios de design responsivo e acessibilidade para garantir a melhor experi√™ncia do usu√°rio.',
    },
    {
      icon: Zap,
      title: 'Otimiza√ß√£o de Performance',
      description:
        'Implementa√ß√£o de t√©cnicas como renderiza√ß√£o otimizada e boas pr√°ticas de codifica√ß√£o para garantir aplica√ß√µes r√°pidas e eficientes.',
    },
    {
      icon: Globe,
      title: 'Qualidade de C√≥digo e Testes',
      description:
        'Utiliza√ß√£o de testes unit√°rios e de integra√ß√£o para garantir a robustez do software, mantendo um c√≥digo limpo, leg√≠vel e de f√°cil manuten√ß√£o.',
    },
  ];

  /**
   * Variantes de anima√ß√£o para o container principal
   */
  const containerVariants: Variants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.3,
      },
    },
  };

  /**
   * Variantes de anima√ß√£o para itens individuais
   */
  const itemVariants: Variants = {
    hidden: { opacity: 0, y: 30 },
    visible: {
      opacity: 1,
      y: 0,
      transition: { duration: 0.8, ease: 'easeOut' },
    },
  };

  /**
   * Variantes de anima√ß√£o para estat√≠sticas
   */
  const statVariants: Variants = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: (index: number) => ({
      opacity: 1,
      scale: 1,
      transition: {
        duration: 0.6,
        delay: index * 0.1,
        type: 'spring',
        stiffness: 300,
        damping: 20,
      },
    }),
  };

  /**
   * Variantes de anima√ß√£o para tecnologias
   */
  const techVariants: Variants = {
    hidden: { opacity: 0, scale: 0 },
    visible: (index: number) => ({
      opacity: 1,
      scale: 1,
      transition: {
        duration: 0.5,
        delay: index * 0.05,
        type: 'spring',
        stiffness: 300,
        damping: 20,
      },
    }),
  };

  /**
   * Variantes de anima√ß√£o para cards de habilidades
   */
  const skillCardVariants: Variants = {
    hidden: { opacity: 0, x: -30 },
    visible: (index: number) => ({
      opacity: 1,
      x: 0,
      transition: {
        duration: 0.6,
        delay: index * 0.1,
        ease: 'easeOut',
      },
    }),
  };

  return (
    <AboutContainer id="about" className={className}>
      <AboutContent>
        {/* Conte√∫do textual e estat√≠sticas */}
        <TextContent
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, amount: 0.3 }}
        >
          <SectionTitle variants={itemVariants}>Sobre Mim</SectionTitle>

          <Description variants={itemVariants}>
            Sou um desenvolvedor apaixonado por tecnologia, focado em criar solu√ß√µes digitais que realmente fazem a diferen√ßa.
            Minha jornada na programa√ß√£o come√ßou com a curiosidade de entender como as coisas funcionam, 
            e hoje meu objetivo √© transformar essa curiosidade em aplica√ß√µes eficientes e intuitivas.
          </Description>

          <Description variants={itemVariants}>
          Atrav√©s do meu curso de forma√ß√£o Full-Stack na EBAC, estou construindo uma base s√≥lida para 
          desenvolver aplica√ß√µes completas.
          Acredito que um bom software √© resultado de um c√≥digo limpo, um design focado no usu√°rio e uma busca cont√≠nua por
          aprendizado e otimiza√ß√£o.
          </Description>

          {/* Estat√≠sticas */}
          <StatsContainer variants={itemVariants}>
            {stats.map((stat, index) => (
              <StatItem
                key={stat.label}
                variants={statVariants}
                custom={index}
                whileHover={{
                  scale: 1.05,
                  transition: { type: 'spring', stiffness: 300, damping: 20 },
                }}
              >
                <StatNumber>{stat.number}</StatNumber>
                <StatLabel>{stat.label}</StatLabel>
              </StatItem>
            ))}
          </StatsContainer>
        </TextContent>

        {/* Habilidades e tecnologias */}
        <SkillsContent
          variants={containerVariants}
          initial="hidden"
          whileInView="visible"
          viewport={{ once: true, amount: 0.3 }}
        >
          <SkillsTitle variants={itemVariants}>
            Tecnologias & Ferramentas
          </SkillsTitle>

          {/* Grid de tecnologias */}
          <TechGrid variants={itemVariants}>
            {technologies.map((tech, index) => (
              <TechItem
                key={tech.name}
                variants={techVariants}
                custom={index}
                whileHover={{
                  scale: 1.1,
                  rotate: 5,
                  transition: { type: 'spring', stiffness: 300, damping: 20 },
                }}
                whileTap={{ scale: 0.95 }}
              >
                <TechIcon>{tech.icon}</TechIcon>
                <TechName>{tech.name}</TechName>
              </TechItem>
            ))}
          </TechGrid>

          <SkillsTitle variants={itemVariants}>
            Principais Habilidades
          </SkillsTitle>

          {/* Cards de habilidades */}
          <SkillCards>
            {skills.map((skill, index) => {
              const IconComponent = skill.icon;
              return (
                <SkillCard
                  key={skill.title}
                  variants={skillCardVariants}
                  custom={index}
                  whileHover={{
                    scale: 1.02,
                    transition: { type: 'spring', stiffness: 300, damping: 20 },
                  }}
                >
                  <SkillHeader>
                    <SkillIcon>
                      <IconComponent size={20} />
                    </SkillIcon>
                    <SkillTitle>{skill.title}</SkillTitle>
                  </SkillHeader>
                  <SkillDescription>{skill.description}</SkillDescription>
                </SkillCard>
              );
            })}
          </SkillCards>
        </SkillsContent>
      </AboutContent>
    </AboutContainer>
  );
};

export default About;
